class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        row,column,box = [[0] * 10 for i in range(0,10)],[[0] * 10 for i in range(0,10)],[[0] * 10 for i in range(0,10)]
        for i in range(0,9):
            for j in range(0,9):
                if board[i][j] != '.':
                    n = int(board[i][j])
                    box_i = (i/3) * 3 + j/3
                    if row[i][n] !=0 or column[j][n] !=0 or box[box_i][n] !=0:
                        return False
                    else:
                       row[i][n] =1 
                       column[j][n] =1 
                       box[box_i][n] =1
        
        return True

board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]

print Solution().isValidSudoku(board)

board = [
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
print Solution().isValidSudoku(board)
